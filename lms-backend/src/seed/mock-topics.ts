// Mock topic data for seeding when OpenAI is unavailable

export const mockTopics = {
  python: [
    { name: 'Variables and Data Types', description: 'Learn about variables, numbers, strings, and booleans in Python.' },
    { name: 'Control Flow', description: 'Master if-else statements, for and while loops in Python.' },
    { name: 'Functions', description: 'Create reusable code blocks with functions, parameters, and return values.' },
    { name: 'Lists and Tuples', description: 'Work with collections of items using Python lists and tuples.' },
    { name: 'Dictionaries', description: 'Store key-value pairs using Python dictionaries.' },
    { name: 'File I/O', description: 'Read from and write to files in Python.' },
    { name: 'Exception Handling', description: 'Handle errors and exceptions in Python code.' },
    { name: 'Object-Oriented Programming', description: 'Create classes and objects in Python.' },
    { name: 'Modules and Packages', description: 'Organize code with modules and packages in Python.' },
    { name: 'Lambda Functions', description: 'Create anonymous functions with lambda expressions.' },
  ],
  java: [
    { name: 'Variables and Data Types', description: 'Learn about primitive types and variables in Java.' },
    { name: 'Control Flow', description: 'Master if-else statements, for and while loops in Java.' },
    { name: 'Methods', description: 'Create reusable code blocks with methods, parameters, and return types.' },
    { name: 'Arrays', description: 'Work with collections of items using Java arrays.' },
    { name: 'Classes and Objects', description: 'Create and use classes and objects in Java.' },
    { name: 'Inheritance', description: 'Extend classes and reuse code with inheritance.' },
    { name: 'Interfaces', description: 'Define contracts with Java interfaces.' },
    { name: 'Exception Handling', description: 'Handle errors and exceptions in Java code.' },
    { name: 'Collections Framework', description: 'Use Lists, Sets, and Maps in Java.' },
    { name: 'Generics', description: 'Create type-safe collections and methods with generics.' },
  ],
  javascript: [
    { name: 'Variables and Data Types', description: 'Learn about variables, numbers, strings, and booleans in JavaScript.' },
    { name: 'Control Flow', description: 'Master if-else statements, for and while loops in JavaScript.' },
    { name: 'Functions', description: 'Create reusable code blocks with functions in JavaScript.' },
    { name: 'Arrays', description: 'Work with collections of items using JavaScript arrays.' },
    { name: 'Objects', description: 'Store key-value pairs using JavaScript objects.' },
    { name: 'DOM Manipulation', description: 'Interact with HTML elements using the Document Object Model.' },
    { name: 'Events', description: 'Handle user interactions with event listeners.' },
    { name: 'Asynchronous JavaScript', description: 'Work with Promises, async/await, and callbacks.' },
    { name: 'ES6 Features', description: 'Use modern JavaScript syntax like arrow functions and destructuring.' },
    { name: 'Modules', description: 'Organize code with import and export statements.' },
  ],
  cpp: [
    { name: 'Variables and Data Types', description: 'Learn about variables, primitives, and type safety in C++.' },
    { name: 'Control Flow', description: 'Master if-else statements, for and while loops in C++.' },
    { name: 'Functions', description: 'Create reusable code blocks with functions, parameters, and return types.' },
    { name: 'Arrays and Vectors', description: 'Work with collections of items using C++ arrays and vectors.' },
    { name: 'Pointers and References', description: 'Understand memory management with pointers and references.' },
    { name: 'Classes and Objects', description: 'Create and use classes and objects in C++.' },
    { name: 'Inheritance', description: 'Extend classes and reuse code with inheritance.' },
    { name: 'Templates', description: 'Write generic code with C++ templates.' },
    { name: 'Standard Template Library', description: 'Use containers, iterators, and algorithms in the STL.' },
    { name: 'Memory Management', description: 'Manage dynamic memory allocation in C++.' },
  ],
}; 